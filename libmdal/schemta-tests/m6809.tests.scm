(import scheme (chicken base) test schemta)

(define (run-src src)
  (map char->integer (assemble 'm6809 src)))

(test-group
 "Addressing Modes"

 (test "immediate" '(#x89 #xff) (run-src " adca #$ff"))
 (test "direct" '(#x99 #xff) (run-src " adca <$ffff"))
 (test "extended" '(#xb9 #xff #xfe) (run-src " adca $fffe"))
 (test "extended-indirect" '(#xa9 #x9f #xff #xfe) (run-src " adca [$fffe]"))
 (test "indexed-autoinc2" '(#xa9 #xa1) (run-src " adca ,y++"))
 (test "indexed-autoinc1" '(#xa9 #xa0) (run-src " adca ,y+"))
 (test "indexed-autodec2" '(#xa9 #xa3) (run-src " adca ,--y"))
 (test "indexed-autodec1" '(#xa9 #xa2) (run-src " adca ,-y"))
 (test "indexed-autoinc2-indirect" '(#xa9 #xb1) (run-src " adca [,y++]"))
 (test "indexed-autodec2-indirect" '(#xa9 #xb3) (run-src " adca [,--y]"))
 (test "indexed-constant-null-offset-from-r" '(#xa9 #xa8) (run-src " adca ,y"))
 (test "indexed-constant-null-offset-from-r-indirect"
       '(#xa9 #xb8)
       (run-src " adca [,y]"))
 (test "indexed-constant-5bit-offset-from-r"
       '(#xa9 #x30)
       (run-src " adca -16,y"))
 (test "indexed-constant-8bit-offset-from-r"
       '(#xa9 #xa8 #x80)
       (run-src " adca -128,y"))
 (test "indexed-constant-16bit-offset-from-r"
       '(#xa9 #xa9 #x80 #x00)
       (run-src " adca -32768,y"))
 (test "indexed-constant-8bit-offset-from-pc"
       '(#xa9 #x8c #xf0)
       (run-src " adca -16,pcr"))
 (test "indexed-constant-16bit-offset-from-pc"
       '(#xa9 #x8d #x80 #x00)
       (run-src " adca -32768,pcr"))
 (test "indexed-accumulator-offset-from-r" '(#xa9 #xa6) (run-src " adca a,y"))
 (test "indexed-accumulator-offset-from-r-indirect"
       '(#xa9 #xb6)
       (run-src " adca [a,y]"))
 (test "indexed-constant-8bit-offset-from-r-indirect"
       '(#xa9 #xb8 #xf0)
       (run-src " adca [-16,y]"))
 (test "indexed-constant-16bit-offset-from-r-indirect"
       '(#xa9 #xb9 #x80 #x00)
       (run-src " adca [-32768,y]"))
 (test "indexed-constant-8bit-offset-from-pc-indirect"
       '(#xa9 #xfc #xf0)
       (run-src " adca [-16,pcr]"))
 (test "indexed-constant-16bit-offset-from-pc-indirect"
       '(#xa9 #xfd #x80 00)
       (run-src " adca [-32768,pcr]")))

(test-group
 "Instructions"

 (test "abx" '(#x3a) (run-src " abx"))
 (test "adca" '(#x89 #xff) (run-src " adca #$ff"))
 (test "adcb" '(#xc9 #xff) (run-src " adcb #$ff"))
 (test "adda" '(#x8b #xff) (run-src " adda #$ff"))
 (test "addb" '(#xcb #xff) (run-src " addb #$ff"))
 (test "addd" '(#xc3 #xff #xfe) (run-src " addd #$fffe"))
 (test "anda" '(#x84 #xff) (run-src " anda #$ff"))
 (test "andb" '(#xc4 #xff) (run-src " andb #$ff"))
 (test "asl" '(#x68 #xa1) (run-src " asl ,y++"))
 (test "asla" '(#x48) (run-src " asla"))
 (test "aslb" '(#x58) (run-src " aslb"))
 (test "bcc" '(#x24 #x02) (run-src " bcc 2"))
 (test "bcs" '(#x25 #x02) (run-src " bcs 2"))
 (test "beq" '(#x27 #x02) (run-src " beq 2"))
 (test "bge" '(#x2c #x02) (run-src " bge 2"))
 (test "bgt" '(#x2e #x02) (run-src " bgt 2"))
 (test "bhi" '(#x22 #x02) (run-src " bhi 2"))
 (test "bhs" '(#x24 #x02) (run-src " bhs 2"))
 (test "bita" '(#x85 #xff) (run-src " bita #$ff"))
 (test "bitb" '(#xc5 #xff) (run-src " bitb #$ff"))
 (test "ble" '(#x2f #x02) (run-src " ble 2"))
 (test "blo" '(#x25 #x02) (run-src " blo 2"))
 (test "bls" '(#x23 #x02) (run-src " bls 2"))
 (test "blt" '(#x2d #x02) (run-src " blt 2"))
 (test "bmi" '(#x2b #x02) (run-src " bmi 2"))
 (test "bne" '(#x26 #x02) (run-src " bne 2"))
 (test "bpl" '(#x2a #x02) (run-src " bpl 2"))
 (test "bra" '(#x20 #x02) (run-src " bra 2"))
 (test "brn" '(#x21 #x02) (run-src " brn 2"))
 (test "bsr" '(#x8d #x02) (run-src " bsr 2"))
 (test "bvc" '(#x28 #x02) (run-src " bvc 2"))
 (test "bvs" '(#x29 #x02) (run-src " bvs 2"))
 (test "clr" '(#x6f #xa1) (run-src " clr ,y++"))
 (test "clra" '(#x4f) (run-src " clra"))
 (test "clrb" '(#x5f) (run-src " clrb"))
 (test "cmpa" '(#x81 #xff) (run-src " cmpa #$ff"))
 (test "cmpb" '(#xc1 #xff) (run-src " cmpb #$ff"))
 (test "cmpd" '(#x10 #x83 #xff #xfe) (run-src " cmpd #$fffe"))
 (test "cmps" '(#x11 #x8c #xff #xfe) (run-src " cmps #$fffe"))
 (test "cmpu" '(#x11 #x83 #xff #xfe) (run-src " cmpu #$fffe"))
 (test "cmpx" '(#x8c #xff #xfe) (run-src " cmpx #$fffe"))
 (test "cmpy" '(#x10 #x8c #xff #xfe) (run-src " cmpy #$fffe"))
 (test "com" '(#x63 #xa1) (run-src " com ,y++"))
 (test "coma" '(#x43) (run-src " coma"))
 (test "comb" '(#x53) (run-src " comb"))
 (test "cwai" '(#x3c #xff) (run-src " cwai #$ff"))
 (test "daa" '(#x19) (run-src " daa"))
 (test "dec" '(#x6a #xa1) (run-src " dec ,y++"))
 (test "deca" '(#x4a) (run-src " deca"))
 (test "decb" '(#x5a) (run-src " decb"))
 (test "eora" '(#x88 #xff) (run-src " eora #$ff"))
 (test "eorb" '(#xc8 #xff) (run-src " eorb #$ff"))
 (test "exg" '(#x1e #x8b) (run-src " exg a,dp"))
 (test "inc" '(#x6c #xa1) (run-src " inc ,y++"))
 (test "inca" '(#x4c) (run-src " inca"))
 (test "incb" '(#x5c) (run-src " incb"))
 (test "jmp" '(#x6e #xa1) (run-src " jmp ,y++"))
 (test "jsr" '(#xad #xa1) (run-src " jsr ,y++"))
 (test "lbcc" '(#x10 #x24 #x02 #x00) (run-src " lbcc $200"))
 (test "lbcs" '(#x10 #x25 #x02 #x00) (run-src " lbcs $200"))
 (test "lbeq" '(#x10 #x27 #x02 #x00) (run-src " lbeq $200"))
 (test "lbge" '(#x10 #x2c #x02 #x00) (run-src " lbge $200"))
 (test "lbgt" '(#x10 #x2e #x02 #x00) (run-src " lbgt $200"))
 (test "lbhi" '(#x10 #x22 #x02 #x00) (run-src " lbhi $200"))
 (test "lbhs" '(#x10 #x24 #x02 #x00) (run-src " lbhs $200"))
 (test "lble" '(#x10 #x2f #x02 #x00) (run-src " lble $200"))
 (test "lblo" '(#x10 #x25 #x02 #x00) (run-src " lblo $200"))
 (test "lbls" '(#x10 #x23 #x02 #x00) (run-src " lbls $200"))
 (test "lblt" '(#x10 #x2d #x02 #x00) (run-src " lblt $200"))
 (test "lbmi" '(#x10 #x2b #x02 #x00) (run-src " lbmi $200"))
 (test "lbne" '(#x10 #x26 #x02 #x00) (run-src " lbne $200"))
 (test "lbpl" '(#x10 #x2a #x02 #x00) (run-src " lbpl $200"))
 (test "lbra" '(#x16 #x02 #x00) (run-src " lbra $200"))
 (test "lbrn" '(#x10 #x21 #x02 #x00) (run-src " lbrn $200"))
 (test "lbsr" '(#x17 #x02 #x00) (run-src " lbsr $200"))
 (test "lbvc" '(#x10 #x28 #x02 #x00) (run-src " lbvc $200"))
 (test "lbvs" '(#x10 #x29 #x02 #x00) (run-src " lbvs $200"))
 (test "lda" '(#x86 #xff) (run-src " lda #$ff"))
 (test "ldb" '(#xc6 #xff) (run-src " ldb #$ff"))
 (test "ldd" '(#xcc #xff #xfe) (run-src " ldd #$fffe"))
 (test "lds" '(#x10 #xce #xff #xfe) (run-src " lds #$fffe"))
 (test "ldu" '(#xce #xff #xfe) (run-src " ldu #$fffe"))
 (test "ldx" '(#x8e #xff #xfe) (run-src " ldx #$fffe"))
 (test "ldy" '(#x10 #x8e #xff #xfe) (run-src " ldy #$fffe"))
 (test "leas" '(#x32 #xa1) (run-src " leas ,y++"))
 (test "leau" '(#x32 #xa1) (run-src " leas ,y++"))
 (test "leax" '(#x32 #xa1) (run-src " leas ,y++"))
 (test "leay" '(#x32 #xa1) (run-src " leas ,y++"))
 (test "lsl" '(#x68 #xa1) (run-src " lsl ,y++"))
 (test "lsla" '(#x48) (run-src " lsla"))
 (test "lslb" '(#x49) (run-src " lslb"))
 (test "lsr" '(#x64 #xa1) (run-src " lsr ,y++"))
 (test "lsra" '(#x44) (run-src " lsra"))
 (test "lsrb" '(#x45) (run-src " lsrb"))
 (test "mul" '(#x3d) (run-src " mul"))
 (test "neg" '(#x60 #xa1) (run-src " neg ,y++"))
 (test "nega" '(#x40) (run-src " nega"))
 (test "negb" '(#x50) (run-src " negb"))
 (test "nop" '(#x12) (run-src " nop"))
 (test "ora" '(#x8a #xff) (run-src " ora #$ff"))
 (test "ora" '(#xca #xff) (run-src " orb #$ff"))
 (test "orcc" '(#x1a #xff) (run-src " orcc #$ff"))
 (test "page" '(#x10) (run-src " page 2"))
 (test "pshs" '(#x34 #xff) (run-src " pshs cc,a,b,dp,x,y,u,pc"))
 (test "pshu" '(#x36 #xff) (run-src " pshu cc,a,b,dp,x,y,s,pc"))
 (test "puls" '(#x35 #xff) (run-src " puls cc,a,b,dp,x,y,u,pc"))
 (test "pulu" '(#x37 #xff) (run-src " pulu cc,a,b,dp,x,y,s,pc"))
 (test "reset" '(#x3e) (run-src " reset"))
 (test "rol" '(#x69 #xa1) (run-src " rol ,y++"))
 (test "rola" '(#x49) (run-src " rola"))
 (test "rolb" '(#x59) (run-src " rolb"))
 (test "ror" '(#x66 #xa1) (run-src " ror ,y++"))
 (test "rora" '(#x46) (run-src " rora"))
 (test "rorb" '(#x56) (run-src " rorb"))
 (test "rti" '(#x3b) (run-src " rti"))
 (test "rts" '(#x39) (run-src " rts"))
 (test "sbca" '(#x82 #xff) (run-src " sbca #$ff"))
 (test "sbcb" '(#xc2 #xff) (run-src " sbcb #$ff"))
 (test "sex" '(#x1d) (run-src " sex"))
 (test "sta" '(#xa7 #xa1) (run-src " sta ,y++"))
 (test "stb" '(#xe7 #xa1) (run-src " stb ,y++"))
 (test "std" '(#xed #xa1) (run-src " std ,y++"))
 (test "sts" '(#x10 #xef #xa1) (run-src " sts ,y++"))
 (test "stu" '(#xef #xa1) (run-src " stu ,y++"))
 (test "stx" '(#xaf #xa1) (run-src " stx ,y++"))
 (test "sty" '(#x10 #xaf #xa1) (run-src " sty ,y++"))
 (test "swi" '(#x3f) (run-src " swi"))
 (test "swi2" '(#x10 #x3f) (run-src " swi2"))
 (test "swi3" '(#x11 #x3f) (run-src " swi3"))
 (test "sync" '(#x13) (run-src " sync"))
 (test "tfr" '(#x1f #x8b) (run-src " tfr a,dp"))
 (test "tst" '(#x6d #xa1) (run-src " tst ,y++"))
 (test "tsta" '(#x4d) (run-src " tsta"))
 (test "tstb" '(#x5d) (run-src " tstb")))

(test-exit)
