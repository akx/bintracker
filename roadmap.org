* libmdal
** Compiler
*** TODO output fn generator
- output fn should generate a list with either onodes or generator fns, keep
  iterating over the list until only ofields remain
*** TODO expand config handling
*** TODO more testing configs/modules
** Tracker API
- need an "enable_rowplay" flag/tag for groups (and perhaps "allow_disable" for
  mute etc)
** Undo/Redo stack
*** TODO Store "reverse calls"?
So each call invoked through the tracker api will push a function reversing the
change to stack
** Documentation
*** TODO Standard Specification
** Refactoring
*** TODO convert code to module
*** TODO exceptions/error handling
**** chicken implements srfi-12 by default
**** https://wiki.call-cc.org/man/4/Exceptions
**** http://wiki.call-cc.org/eggref/4/simple-exceptions
*** TODO split into git submodule
See https://stackoverflow.com/questions/359424/detach-move-subdirectory-into-separate-git-repository/17864475#17864475
* bintracker-ng
** GUI
*** tk or pstk?
egg/nuklear might be an option in case glfw3 is pulled in
** REPL Console
*** Eggs: linenoise or parley (recommended)
** Plugin API
*** Hash plugins?
http://wiki.call-cc.org/eggref/4/simple-md5
*** Eggs: noise, compressors
** Emulation API
*** native
**** look into bind egg
*** gme
*** MAME
https://docs.mamedev.org/commandline/commandline-all.html
There exists a thing called libmame, but it's hopelessly outdated
**** Use LUA Scripting API?
https://docs.mamedev.org/techspecs/luaengine.html
- Yeah, via http://wiki.call-cc.org/eggref/4/lua
- But lua-egg uses 5.1, MAME uses 5.3
- lua script must be loaded as file to MAME, so actually we need to do a
  syscall from Scheme -> https://wiki.call-cc.org/man/4/Unit%20posix ???
- if MAME interface is fast enough, we could solely rely on it for a start
  (and that would deter commercial use of bintracker), but MAME is a big cpu
  hogger, and memory/state io is not implemented for all systems
- bintracker will need to talk to MAME/Lua via files, look into passing file
  descriptors etc to Lua
**** Interface into MAME Debugger api to trigger breakpoints for reloading etc?
on an even more advanced stage, interface into mame/unidasm
** MIDI Support
Will most likely require building a bridge to a portable C MIDI lib
** Documentation
** Random Thoughts
*** tracker .cfg can be written in .scm
* libmdal-algo
* general useful stuff
** Optimization
*** Profiling
available in https://wiki.call-cc.org/man/4/Using%20the%20compiler
** Chicken+SWIG:
Conclusion: Will not work because Chicken no longer actively supports it
http://www.swig.org/Doc3.0/Chicken.html#Chicken
http://www.swig.org/tutorial.html
** Eggs
*** alist-lib, amb, lookup-table
